name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: boost install
      run: sudo apt-get update && sudo apt-get install -yq libboost-dev libboost-program-options-dev libboost-serialization-dev libmpfr-dev

    - name: Checkout Cadical
      uses: actions/checkout@v2
      with:
        repository: meelgroup/cadical
        ref: mate-only-libraries-1.8.0
        path: cadical
        
    - name: Build Cadical
      run: |
       cd cadical
       ./configure
       make -j8
       cd ..

    - name: Checkout Cadiback
      uses: actions/checkout@v2
      with:
        repository: meelgroup/cadiback
        ref: mate
        path: cadiback
        
    - name: Build Cadiback
      run: |
       cd cadiback
       ./configure
       make -j8
       cd ..
    
    - name: Build CMS
      run: |
       git clone --depth 1 https://github.com/msoos/cryptominisat
       cd cryptominisat
       mkdir build && cd build
       cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ..
       cmake --build . --config ${{env.BUILD_TYPE}}
       cd ../..
    
    - name: Checkout SBVA
      uses: actions/checkout@v2
      with:
        repository: meelgroup/sbva
        ref: master
        path: sbva    
        
    - name: Build SBVA
      run: |
       cd sbva
       mkdir build && cd build
       cmake ..
       make -j8
       cd ../..

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
